from mapping_helper import *


class RNA_splicing(object):
    """docstring for RNA_splicing"""

    def make_protein(self, T, substr):
        ans = ""

        # removing the introns
        for string in substr:
            while string in T:
                index = T.index(string)
                T = T[:index] + T[index + len(string):]

        # replace thymine with uracil in the DNA string
        T = "".join(x if x is not "T" else "U" for x in T)

        # forming the protein using the mRNA to Protein mapping
        for i in range(0, len(T), codon_len):
            codon = mRNA_2_protein[T[i:i + codon_len]]
            if codon is "STOP":
                break
            ans += codon

        return ans


codon_len = 3


def main():
    obj = RNA_splicing()
    T = "ATGGGGCCACTAGTATGGGCTACAAGGACAGGCGGTTCCCCGGATGTGTATGATCCGTTC\
TGCTCCACTCTTCCTTCACGGAATCGCTCGGAACTACATTCTGCAAGTAACACGTAGGGC\
TGCGCCTGTGATACACTATGATTACGGATCTCGCAATATCTGCGCACGGGACACCAACGT\
AGAGGGGCGGCTGTGTCACTTTGTATTAGGAGGGAACGTCATCAACGCAATTAACAAAAC\
AAGCAACGAAACGGTACTTTAAAACACTATTTGCTTCACACCTCACTCGGAACCCCCCTT\
AGATTTTTAGTGCATGGACCTGGCCTGCATTTCCTGCGACCACTCAGGTTTGAGAGACCC\
CGTCCAGATTTGGAGGGCCAAGGGAGCAACTTGGCTTACTGTCCTCCGAGTGCTGCAGGT\
GCACCCAACGCTTTGGACGTCCACCGTGATGCGTCGTTGTGTCAACAATCCCTATTCCCA\
TCCTCTAAATATGACCACCCCTACCATGAGATCAGCTCCGGCCGTCGATGTCCATCCCTG\
AATACATGATGGAATCAGCGTTCTAGGCCCGTCTGTTCAACTAGTATAGAGACGACTCTC\
CACCCCCCAATGCGCATGGACACTATAACTCCGGCCCTGCAAGGTGTAGTGGACAGGAAC\
ATGCAGGACGTGCGGTTCCACACGTGCTATGAATTGGTCTTTAGCCGACCCGTACAGTGA\
GCATTGTACCCAGGGAGAGTGCCGCGCCATACCTCTCTCAAACCATAGTGAGGTTAGATG\
TGTTCATGGCGATTAACTCAGGGCGGTCTGCGCGGCACAATACCCCCTCGGAAGTCCAAC\
GATTGCACCGCCACAAGCAAGAAATGGACCCGACCTGATCAGGACTCCATAGTCGCCGGC\
CCCTCTAGTAGGTTACCGTGTAAATGTTTGCCTAATTAA"

    substr = [
        "AGAGACCCCG", "GTCTTTAGCCGACCCGTAC",
        "AACCATAGTGAGGTTAGATGTGTTCATGGCGATTAA",
        "AGGACAGGCGGTTCCCCGGATGTGTATGATCCGTTCTGCTCCAC", "AATTAACAAAACAAGCAACGA",
        "CTTAGATTTTTAGTGCATGGAC", "GGGCGGCTGTGTCACTT",
        "TGCTGCAGGTGCACCCAACGCTTTGGACGTCCACCGTGATGCGTCGT",
        "TAACACGTAGGGCTGCGCCTGTGATACACTATGATTACGGA",
        "CCCGACCTGATCAGGACTCCATAGTCGCCGGCCCCTCTAGTAGGTTACCG",
        "ACGACTCTCCACCCCCCAATGCGCATGGACACTATAACTCCGGCCCTG", "GGAAGTCCAACGATT",
        "ACCATGAGATCAGCTCCGGCCGTCGATGTCCATCCCTGAATACATGA"
    ]

    print obj.make_protein(T, substr)


if __name__ == "__main__":
    main()
